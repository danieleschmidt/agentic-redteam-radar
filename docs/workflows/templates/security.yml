# Advanced Security Workflow for Agentic RedTeam Radar
# Comprehensive security scanning, SBOM generation, and vulnerability management

name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 3 * * *'  # Daily security scan
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Static Application Security Testing (SAST)
  sast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install security tools
        run: |
          pip install --upgrade pip
          pip install bandit[toml] safety semgrep
          pip install -e .[dev]
      
      - name: Run Bandit (SAST)
        run: |
          bandit -r src/ -f sarif -o bandit.sarif || true
          bandit -r src/ -f json -o bandit-report.json || true
      
      - name: Run Semgrep (SAST)
        run: |
          semgrep --config=auto --sarif --output=semgrep.sarif src/ || true
      
      - name: Upload SARIF results to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: |
            bandit.sarif
            semgrep.sarif

  # Software Composition Analysis (SCA)
  sca:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pip-audit cyclone-dx-bom
          pip install -e .
      
      - name: Run pip-audit (SCA)
        run: |
          pip-audit --format=json --output=pip-audit.json || true
          pip-audit --format=sarif --output=pip-audit.sarif || true
      
      - name: Generate SBOM
        run: |
          cyclonedx-py requirements -i requirements.txt -o sbom.json
      
      - name: Upload SCA results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: pip-audit.sarif
      
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json

  # Container Security Scanning
  container-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: |
          docker build -t agentic-redteam-radar:test .
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'agentic-redteam-radar:test'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Secrets Detection
  secrets-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install detect-secrets
        run: pip install detect-secrets
      
      - name: Run detect-secrets
        run: |
          detect-secrets scan --all-files --baseline .secrets.baseline
      
      - name: Verify secrets baseline
        run: |
          detect-secrets audit .secrets.baseline

  # License Compliance Check
  license-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install license checker
        run: |
          pip install --upgrade pip
          pip install pip-licenses
          pip install -e .
      
      - name: Check licenses
        run: |
          pip-licenses --format=json --output-file=licenses.json
          pip-licenses --format=csv --output-file=licenses.csv
      
      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: |
            licenses.json
            licenses.csv

  # Security Report Generation
  security-report:
    runs-on: ubuntu-latest
    needs: [sast, sca, secrets-scan, license-check]
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Generate consolidated security report
        run: |
          mkdir -p security-reports
          echo "# Security Scan Report" > security-reports/README.md
          echo "Generated on: $(date)" >> security-reports/README.md
          echo "" >> security-reports/README.md
          
          if [ -f bandit-report.json ]; then
            echo "## SAST Results (Bandit)" >> security-reports/README.md
            echo "See bandit-report.json for detailed findings" >> security-reports/README.md
            cp bandit-report.json security-reports/
          fi
          
          if [ -f pip-audit.json ]; then
            echo "## SCA Results (pip-audit)" >> security-reports/README.md
            echo "See pip-audit.json for vulnerability details" >> security-reports/README.md
            cp pip-audit.json security-reports/
          fi
          
          if [ -f sbom/sbom.json ]; then
            echo "## Software Bill of Materials" >> security-reports/README.md
            echo "See sbom.json for component inventory" >> security-reports/README.md
            cp sbom/sbom.json security-reports/
          fi
      
      - name: Upload consolidated report
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: security-reports/
          retention-days: 30

  # Notify on security issues
  notify:
    runs-on: ubuntu-latest
    needs: [sast, sca, container-security, secrets-scan]
    if: failure()
    steps:
      - name: Create security issue
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Security Scan Failed',
              body: `Security scan failed on ${context.sha.substring(0, 7)}. Please review the workflow logs.`,
              labels: ['security', 'urgent']
            });