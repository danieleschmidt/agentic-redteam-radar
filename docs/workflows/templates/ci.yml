# Comprehensive CI Pipeline for Agentic RedTeam Radar
# Includes testing, security scanning, performance benchmarks, and quality gates

name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scan

env:
  PYTHON_VERSION: '3.10'
  POETRY_VERSION: '1.6.1'

jobs:
  # Pre-flight checks
  pre-flight:
    runs-on: ubuntu-latest
    outputs:
      should-test: ${{ steps.changes.outputs.src }}
      should-security-scan: ${{ steps.changes.outputs.security }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - 'src/**'
              - 'tests/**'
              - 'pyproject.toml'
              - 'requirements.txt'
            security:
              - 'src/**'
              - '.pre-commit-config.yaml'
              - 'pyproject.toml'

  # Code quality and linting
  quality:
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.should-test == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e .[dev]
      
      - name: Run pre-commit hooks
        run: pre-commit run --all-files

  # Multi-Python testing matrix
  test:
    runs-on: ${{ matrix.os }}
    needs: [pre-flight, quality]
    if: needs.pre-flight.outputs.should-test == 'true'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
        exclude:
          - os: windows-latest
            python-version: '3.12'
          - os: macos-latest
            python-version: '3.12'
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e .[test]
      
      - name: Run tests with coverage
        run: |
          pytest --cov=agentic_redteam --cov-report=xml --cov-report=term-missing
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  # Performance benchmarking
  performance:
    runs-on: ubuntu-latest
    needs: [pre-flight, quality]
    if: needs.pre-flight.outputs.should-test == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e .[test]
      
      - name: Run performance tests
        run: |
          pytest tests/performance/ --benchmark-json=benchmark.json
      
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'pytest'
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  # Security scanning
  security:
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.should-security-scan == 'true' || github.event_name == 'schedule'
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e .[dev]
      
      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
      
      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            pip-audit-report.json

  # Build and packaging
  build:
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install build dependencies
        run: |
          pip install --upgrade pip build twine
      
      - name: Build package
        run: python -m build
      
      - name: Check package
        run: twine check dist/*
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  # Documentation build
  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e .[docs]
      
      - name: Build documentation
        run: |
          mkdocs build --strict
      
      - name: Upload docs
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: site/

  # Final status check
  ci-status:
    runs-on: ubuntu-latest
    needs: [quality, test, security, build, docs]
    if: always()
    steps:
      - name: Check CI status
        run: |
          if [[ "${{ needs.quality.result }}" == "failure" || \
                "${{ needs.test.result }}" == "failure" || \
                "${{ needs.security.result }}" == "failure" || \
                "${{ needs.build.result }}" == "failure" || \
                "${{ needs.docs.result }}" == "failure" ]]; then
            echo "CI pipeline failed"
            exit 1
          fi
          echo "CI pipeline passed"