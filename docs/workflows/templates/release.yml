# Automated Release Workflow for Agentic RedTeam Radar
# Semantic versioning, changelog generation, and multi-platform publishing

name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  id-token: write  # For trusted publishing

jobs:
  # Validate release
  validate:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Validate version format
        run: |
          if [[ ! "${{ steps.version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Invalid version format: ${{ steps.version.outputs.version }}"
            exit 1
          fi

  # Run full test suite
  test:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e .[dev,test]
      
      - name: Run full test suite
        run: |
          pytest --cov=agentic_redteam --cov-report=term-missing
      
      - name: Run security scan
        run: |
          bandit -r src/ -ll
          pip-audit

  # Build release artifacts
  build:
    runs-on: ubuntu-latest
    needs: [validate, test]
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Update version in pyproject.toml
        run: |
          sed -i 's/version = ".*"/version = "${{ needs.validate.outputs.version }}"/' pyproject.toml
      
      - name: Install build dependencies
        run: |
          pip install --upgrade pip build twine
      
      - name: Build package
        run: |
          python -m build
      
      - name: Verify package
        run: |
          twine check dist/*
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  # Generate changelog
  changelog:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate changelog
        id: changelog
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            PREV_TAG=$(git describe --tags --abbrev=0)
            CHANGES=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          else
            PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1)
            CHANGES=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          echo "changes<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
    
    outputs:
      changes: ${{ steps.changelog.outputs.changes }}

  # Create GitHub release
  release:
    runs-on: ubuntu-latest
    needs: [validate, test, build, changelog]
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          name: Release v${{ needs.validate.outputs.version }}
          body: |
            ## What's Changed
            
            ${{ needs.changelog.outputs.changes }}
            
            ## Installation
            
            ```bash
            pip install agentic-redteam-radar==${{ needs.validate.outputs.version }}
            ```
            
            ## Docker
            
            ```bash
            docker pull ghcr.io/terragonlabs/agentic-redteam-radar:${{ needs.validate.outputs.version }}
            ```
          prerelease: ${{ needs.validate.outputs.is-prerelease == 'true' }}
          files: |
            dist/*
          generate_release_notes: true

  # Publish to PyPI
  pypi-publish:
    runs-on: ubuntu-latest
    needs: [validate, test, build, release]
    environment:
      name: pypi
      url: https://pypi.org/p/agentic-redteam-radar
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://upload.pypi.org/legacy/

  # Build and push Docker image
  docker:
    runs-on: ubuntu-latest
    needs: [validate, test, build, release]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/terragonlabs/agentic-redteam-radar:${{ needs.validate.outputs.version }}
            ghcr.io/terragonlabs/agentic-redteam-radar:latest
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Post-release tasks
  post-release:
    runs-on: ubuntu-latest
    needs: [validate, pypi-publish, docker]
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update development version
        run: |
          # Bump to next development version
          CURRENT="${{ needs.validate.outputs.version }}"
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT"
          NEXT_PATCH=$((VERSION_PARTS[2] + 1))
          NEXT_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${NEXT_PATCH}-dev"
          
          sed -i "s/version = \".*\"/version = \"$NEXT_VERSION\"/" pyproject.toml
      
      - name: Create pull request for version bump
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: bump version to ${{ needs.validate.outputs.version }}-dev"
          title: "chore: post-release version bump"
          body: |
            Automated version bump after release v${{ needs.validate.outputs.version }}
          branch: chore/post-release-version-bump
          delete-branch: true