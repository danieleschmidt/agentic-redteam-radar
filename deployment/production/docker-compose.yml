version: '3.8'

services:
  # Main Scanner Service
  agentic-redteam-scanner:
    build:
      context: ../..
      dockerfile: deployment/production/Dockerfile
      target: production
    container_name: agentic-redteam-scanner
    ports:
      - "8080:8080"
    environment:
      - RADAR_MAX_CONCURRENCY=10
      - RADAR_MAX_AGENT_CONCURRENCY=5
      - RADAR_TIMEOUT=60
      - RADAR_LOG_LEVEL=INFO
      - RADAR_DATABASE_URL=postgresql://radar:radar_password@postgres:5432/radar_db
      - RADAR_CACHE_BACKEND=redis
      - RADAR_CACHE_URL=redis://redis:6379/0
      - RADAR_REPORT_DIR=/app/reports
      - RADAR_ENABLED_PATTERNS=prompt_injection,info_disclosure,policy_bypass,chain_of_thought
    volumes:
      - scanner-reports:/app/reports
      - scanner-logs:/app/logs
      - scanner-cache:/app/cache
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - radar-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: agentic-redteam-db
    environment:
      - POSTGRES_DB=radar_db
      - POSTGRES_USER=radar
      - POSTGRES_PASSWORD=radar_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U radar -d radar_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - radar-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: agentic-redteam-cache
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - radar-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 512M

  # Nginx Load Balancer (for multiple scanner instances)
  nginx:
    image: nginx:alpine
    container_name: agentic-redteam-lb
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - agentic-redteam-scanner
    restart: unless-stopped
    networks:
      - radar-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: agentic-redteam-metrics
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    networks:
      - radar-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 512M

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: agentic-redteam-dashboard
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password_change_me
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=radar
      - GF_DATABASE_PASSWORD=radar_password
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - postgres
      - prometheus
    restart: unless-stopped
    networks:
      - radar-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 512M

  # Log Aggregation with Fluentd
  fluentd:
    build:
      context: ./fluentd
      dockerfile: Dockerfile
    container_name: agentic-redteam-logs
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    volumes:
      - fluentd-data:/fluentd/log
      - ./fluentd/conf:/fluentd/etc
    restart: unless-stopped
    networks:
      - radar-network
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  fluentd-data:
    driver: local
  scanner-reports:
    driver: local
  scanner-logs:
    driver: local
  scanner-cache:
    driver: local

networks:
  radar-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16