version: '3.8'

# Production Docker Compose for Agentic RedTeam Radar
# High availability, monitoring, and security-focused setup

services:
  # Main application with load balancing
  radar-app-1:
    build:
      context: ..
      dockerfile: Dockerfile
      target: production
    container_name: radar-app-1
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app/src
      - RADAR_LOG_LEVEL=INFO
      - RADAR_MAX_CONCURRENCY=10
      - RADAR_MAX_AGENT_CONCURRENCY=5
      - RADAR_DATABASE_URL=postgresql://radar:${POSTGRES_PASSWORD}@postgres:5432/radar_db
      - RADAR_CACHE_BACKEND=redis
      - RADAR_CACHE_URL=redis://redis:6379/0
      - RADAR_OUTPUT_DIR=/app/reports
    volumes:
      - radar_reports:/app/reports
      - radar_logs:/app/logs
      - /etc/localtime:/etc/localtime:ro
    networks:
      - radar_network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "python", "-c", "import agentic_redteam; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    user: "1000:1000"

  radar-app-2:
    build:
      context: ..
      dockerfile: Dockerfile
      target: production
    container_name: radar-app-2
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app/src
      - RADAR_LOG_LEVEL=INFO
      - RADAR_MAX_CONCURRENCY=10
      - RADAR_MAX_AGENT_CONCURRENCY=5
      - RADAR_DATABASE_URL=postgresql://radar:${POSTGRES_PASSWORD}@postgres:5432/radar_db
      - RADAR_CACHE_BACKEND=redis
      - RADAR_CACHE_URL=redis://redis:6379/0
      - RADAR_OUTPUT_DIR=/app/reports
    volumes:
      - radar_reports:/app/reports
      - radar_logs:/app/logs
      - /etc/localtime:/etc/localtime:ro
    networks:
      - radar_network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "python", "-c", "import agentic_redteam; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    user: "1000:1000"

  # Load balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: radar-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - radar_logs:/var/log/nginx
    networks:
      - radar_network
    depends_on:
      - radar-app-1
      - radar-app-2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    user: "101:101"

  # PostgreSQL with replication
  postgres:
    image: postgres:16-alpine
    container_name: radar-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=radar_db
      - POSTGRES_USER=radar
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - radar_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U radar -d radar_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    security_opt:
      - no-new-privileges:true
    user: "999:999"

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: radar-redis
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    networks:
      - radar_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    security_opt:
      - no-new-privileges:true
    user: "999:999"

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: radar-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    networks:
      - radar_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.1.2
    container_name: radar-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - radar_network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    user: "472:472"

  # Log aggregation
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: radar-fluentd
    restart: unless-stopped
    volumes:
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - radar_logs:/var/log/radar:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - radar_network
    environment:
      - FLUENTD_SYSTEMD_CONF=disable
    security_opt:
      - no-new-privileges:true
    user: "100:101"

  # Security scanner
  trivy:
    image: aquasec/trivy:latest
    container_name: radar-trivy
    restart: "no"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - trivy_cache:/root/.cache/trivy
    networks:
      - radar_network
    command: ["server", "--listen", "0.0.0.0:4954"]
    security_opt:
      - no-new-privileges:true

networks:
  radar_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  radar_reports:
    driver: local
  radar_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  trivy_cache:
    driver: local