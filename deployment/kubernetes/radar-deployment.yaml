apiVersion: v1
kind: Namespace
metadata:
  name: agentic-redteam
  labels:
    name: agentic-redteam
    environment: production

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: radar-config
  namespace: agentic-redteam
data:
  radar.yaml: |
    scanner:
      max_concurrency: 20
      timeout: 60
      retry_attempts: 3
      max_payloads_per_pattern: 20
    
    patterns:
      enabled:
        - prompt_injection
        - info_disclosure
        - policy_bypass
        - chain_of_thought
    
    security:
      sanitize_output: true
      rate_limit_requests_per_minute: 100
      enable_audit_logging: true
    
    performance:
      cache_results: true
      cache_ttl: 3600
    
    monitoring:
      enable_metrics: true
      log_level: "INFO"
      structured_logging: true

---
apiVersion: v1
kind: Secret
metadata:
  name: radar-secrets
  namespace: agentic-redteam
type: Opaque
data:
  # Base64 encoded secrets - replace with actual values
  db-password: cGFzc3dvcmQxMjM= # password123
  redis-password: cmVkaXNwYXNzd29yZA== # redispassword
  jwt-secret: and0c2VjcmV0a2V5Zm9ycmFkYXI= # jwtsecretkeyforradar

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: radar-app
  namespace: agentic-redteam
  labels:
    app: radar-app
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: radar-app
  template:
    metadata:
      labels:
        app: radar-app
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: radar-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: radar
        image: terragonlabs/agentic-redteam-radar:1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: REDIS_URL
          value: "redis://redis-service:6379/0"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: radar-secrets
              key: database-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: radar-secrets
              key: jwt-secret
        - name: API_RATE_LIMIT
          value: "100"
        - name: MAX_CONCURRENCY
          value: "20"
        - name: ENABLE_METRICS
          value: "true"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: logs-volume
          mountPath: /app/logs
        - name: reports-volume
          mountPath: /app/reports
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config-volume
        configMap:
          name: radar-config
      - name: logs-volume
        emptyDir: {}
      - name: reports-volume
        persistentVolumeClaim:
          claimName: radar-reports-pvc
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: radar-service
  namespace: agentic-redteam
  labels:
    app: radar-app
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: radar-app

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: agentic-redteam
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: radar-secrets
              key: redis-password
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --maxmemory
        - "512mb"
        - --maxmemory-policy
        - "allkeys-lru"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: agentic-redteam
  labels:
    app: redis
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
  selector:
    app: redis

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: agentic-redteam
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: radar-reports-pvc
  namespace: agentic-redteam
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: shared-storage

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: radar-ingress
  namespace: agentic-redteam
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://radar.terragonlabs.com"
    nginx.ingress.kubernetes.io/enable-cors: "true"
spec:
  tls:
  - hosts:
    - radar.terragonlabs.com
    - api.radar.terragonlabs.com
    secretName: radar-tls-secret
  rules:
  - host: radar.terragonlabs.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: radar-service
            port:
              number: 80
  - host: api.radar.terragonlabs.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: radar-service
            port:
              number: 80

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: radar-service-account
  namespace: agentic-redteam

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: agentic-redteam
  name: radar-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: radar-role-binding
  namespace: agentic-redteam
subjects:
- kind: ServiceAccount
  name: radar-service-account
  namespace: agentic-redteam
roleRef:
  kind: Role
  name: radar-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: radar-pdb
  namespace: agentic-redteam
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: radar-app

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: radar-hpa
  namespace: agentic-redteam
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: radar-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: radar-network-policy
  namespace: agentic-redteam
spec:
  podSelector:
    matchLabels:
      app: radar-app
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80